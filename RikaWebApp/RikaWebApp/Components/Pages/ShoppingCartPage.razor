@using RikaWebApp.Components.Sections
@using RikaWebApp.Models
@using RikaWebApp.Services
@using System.Security.Claims
@layout RikaWebApp.Components.Layout.MainLayout
@rendermode InteractiveServer
@inject CartService _cartService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProductService _productService
@inject NavigationManager NavigationManager
@page "/cart" 


<section class="shoppingcart-section">
    <div class="container">

        <TopbarCart/>
        <h1>My Cart</h1>

        @if (shoppingCart == null)
        {
           @*  <p>Laddar kundvagn...</p> *@
        }
        else if (shoppingCart.Items.Count == 0)
        {
            <p>Din kundvagn är tom.</p>
        }
        else
        {
            @foreach (var item in shoppingCart.Items)
            {

                <div class="cart-item">
                    <img src="#" alt="">
                    <div class="item-details">
                        <h2>@ProductTitles[item.ProductId]</h2>
                        <p>Vado Odelle Dress</p>
                        <span class="item-price">$189.00</span>
                    </div>
                    <button class="delete-item" @onclick="() => RemoveProduct(item.ProductId)">
                        <i class="fa-solid fa-trash-can"></i>
                    </button>
                    <div class="quantity-controls">
                        <button class="quantity-btn" @onclick="() => DecrementProduct(item.ProductId)">-</button>
                        <span class="quantity-btn">@item.Quantity</span>
                        <button class="quantity-btn" @onclick="() => IncrementProduct(item.ProductId)">+</button>
                    </div>
                </div>
            }
        }
        <PromoCode/>
        <div class="cart-summary">
            <p>Total (3 items):</p>
            <p>$500</p>
        </div>
        <a href="/payment" class="btn-dark"> Proceed to Checkout
            <div class="arrow-right"><i class="fa-solid fa-right-long"></i></div>
        </a>
    </div>
</section>

@code {
    private ShoppingDto shoppingCart;
    private IEnumerable<ProductModel> Products { get; set; }
    private Dictionary<Guid, string> ProductTitles { get; set; } = new Dictionary<Guid, string>();
    private IEnumerable<PriceModelDto> Prices { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdString = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        Products = await _productService.GetAll();

        if (Guid.TryParse(userIdString, out var userId))
        {
            shoppingCart = await _cartService.GetCart(userId); // Skicka UserId som parameter
        }
        else
        {
            shoppingCart = new ShoppingDto(); // Returnera en tom DTO om UserId inte är giltigt
        }

        foreach (var item in shoppingCart.Items)
        {
            var product = Products.FirstOrDefault(p => p.Id == item.ProductId);
            ProductTitles[item.ProductId] = product?.Name ?? "Titel saknas";
        }
    }

    private async Task IncrementProduct(Guid productId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdString = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(userIdString) || !Guid.TryParse(userIdString, out var userId))
        {
            Console.WriteLine("Kunde inte hitta eller omvandla UserId.");
            return;
        }

        var result = await _productService.BuyProduct(productId, userId);
        if (result != null)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            // await InvokeAsync(StateHasChanged);
        }
        else
        {
            Console.WriteLine("Köpet misslyckades.");
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task DecrementProduct(Guid ProductId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdString = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(userIdString) || !Guid.TryParse(userIdString, out var userId))
        {
            Console.WriteLine("Kunde inte hitta eller omvandla UserId.");
            return;
        }

        var result = await _cartService.DecrementCart(ProductId, userId);

        if (result != null)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        else
        {
            Console.WriteLine("Borttagning misslyckades.");
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task RemoveProduct(Guid ProductId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdString = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(userIdString) || !Guid.TryParse(userIdString, out var userId))
        {
            Console.WriteLine("Kunde inte hitta eller omvandla UserId.");
            
            return;     
        }
        var result = await _cartService.RemoveItem(ProductId, userId);

        if (result != null)
        {
            var itemToRemove = shoppingCart.Items.FirstOrDefault(i => i.ProductId == ProductId);
            if (itemToRemove != null)
            {
                shoppingCart.Items.Remove(itemToRemove);
            }
        }
        else
        {
            Console.WriteLine("Borttagning misslyckades.");
        }
        await InvokeAsync(StateHasChanged);
    }

    // public async Task Price()
    // {
    //     Product = await _productService.Get(ProductId);

    //     if (Product != null && Product.Prices != null)
    //     {
    //         // Hämta det första matchande priset från `Prices` som finns i `Product.Prices`
    //         var price = Product.Prices.Select(p => p.Price1).FirstOrDefault();
    //         ProductPrice = price;
    //     }
    //     else
    //     {
    //         // Om produkt eller priser saknas, sätt till null eller valfritt meddelande
    //         ProductPrice = 0;
    //     }
    // }
}
