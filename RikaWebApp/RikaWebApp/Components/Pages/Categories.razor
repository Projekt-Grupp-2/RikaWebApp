@page "/categories"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h4 class="category-list-title">Categories</h4>

<div class="category-list">
    @if (categories == null)
    {
        <p>Loading...</p>
    }
    else if (!categories.Any())
    {
        <p>No categories available.</p>
    }
    else
    {
        <div class="category-list-container">
            <NavLink class="category-item btn-category-item" href="/productlist">
                <div class="category-left">
                    <i class="fa fa-list"></i>
                    <span class="category-name"><h5>All Products</h5></span>
                </div>
                <div class="category-right">
                    <span class="product-count">@totalProductCount Products</span>
                </div>
            </NavLink>
        </div>

        <div class="category-list-container">
            <NavLink class="category-item btn-category-item" href="/productlist/newarrivals">
                <div class="category-left">
                    <i class="fa fa-star"></i>
                    <span class="category-name"><h5>New Arrivals</h5></span>
                </div>
                <div class="category-right">
                    <span class="product-count">@newArrivalsCount Products</span>
                </div>
            </NavLink>
        </div>

        @foreach (var category in categories)
        {
            <div class="category-list-container">
                <NavLink class="category-item btn-category-item" href="@($"/productlist/{category.CategoryName}")">
                    <div class="category-left">
                        @((MarkupString)category.Icon)
                        <span class="category-name"><h5>@category.CategoryName</h5></span>
                    </div>
                    <div class="category-right">
                        <span class="product-count">@category.ProductCount Product</span>
                    </div>
                </NavLink>
            </div>
        }
    }
    }
</div>

@code {
    public class CategoryDto
    {
        public string CategoryName { get; set; } = null!;
        public string Icon { get; set; } = null!;
        public int ProductCount { get; set; }
    }

    private List<CategoryDto> categories;
    private int totalProductCount;
    private int newArrivalsCount;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var url = "http://localhost:7111/api/categories/productcount";
            categories = await Http.GetFromJsonAsync<List<CategoryDto>>(url);
            totalProductCount = categories?.Sum(c => c.ProductCount) ?? 0;

            var newArrivalsUrl = "http://localhost:7111/api/products/newarrivals";
            var newArrivals = await Http.GetFromJsonAsync<List<ProductDto>>(newArrivalsUrl);
            newArrivalsCount = newArrivals?.Count ?? 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    public class ProductDto
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string ShortDescription { get; set; }
        public decimal Price { get; set; }
        public decimal? DiscountPrice { get; set; }
        public string ImageUrl { get; set; }
    }
}





