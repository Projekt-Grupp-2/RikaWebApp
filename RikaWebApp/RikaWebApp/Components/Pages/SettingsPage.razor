@page "/settings"
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Mvc
@using Microsoft.EntityFrameworkCore
@using RikaWebApp.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization;
@using System.ComponentModel.DataAnnotations
@using RikaWebApp.Client.Pages
@using System.Diagnostics

@rendermode InteractiveServer

@inject HttpClient httpClient
@inject UserService UserService

@inject NavigationManager Navigation
@inject FileService FileService
@inject IServiceProvider ServiceProvider


@attribute [Authorize]


<section class="settings-page">
    <div class="container">

        <div class="image-upload">
            @if (UserProfileImage == null)
            {
                <img src="./images/profile-image-standard.png" alt="Standard profile image" />
            }
            else
            {
                <img src="@UserProfileImage.ProfileImage" alt="@user.Name" />
            }
            <label for="fileUploader">
                <i class="fa-solid fa-pen"></i>
                <InputFile OnChange="LoadFiles" class="upload" id="fileUploader" type="file" name="file" hidden />
            </label>
        </div>

            <label class="upload">Upload Image</label>
        
        <EditForm FormName="basicinfo" method="post" Model="BasicInfoForm" OnValidSubmit="HandleBasicFormSubmit" novalidate class="form">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="@notificationClass" role="alert">@notificationMessage</div>

            <div class="inputgroup">
                <label>Name</label>
                <InputText id="Name" @bind-Value=BasicInfoForm.Name />
            </div>
            <div class="inputgroup">
                <label>Gender</label>

                <div class="checkbox-container @(BasicInfoForm.IsMale ? "active" : "")">

                    <InputCheckbox type="checkbox" id="male" @bind-Value="BasicInfoForm.IsMale" @onchange="() => OnGenderChanged(true)" />
                        <div class="custom-checkbox @(BasicInfoForm.IsMale ? "checked" : "")"></div>
                        <label for="male">Male</label>
                       
                </div>

                <div class="checkbox-container @(BasicInfoForm.IsFemale ? "active" : "")">

                    <InputCheckbox type="checkbox" id="female" @bind-Value="BasicInfoForm.IsFemale" @onchange="() => OnGenderChanged(false)" />
                        <div class="custom-checkbox @(BasicInfoForm.IsFemale ? "checked" : "")"></div>
                        <label for="female">Female</label>
                       
                   
                </div>
               
                

            </div>
            <div class="inputgroup">
                <label>Age</label>
                @if (BasicInfoForm.Age == null || BasicInfoForm.Age == 0)
                {
                    <input placeholder="Age not specified" @bind-value=BasicInfoForm.Age />
                }
                else
                {
                    <InputNumber id="Age" @bind-Value=BasicInfoForm.Age/>
                }

            </div>
            <div class="inputgroup">
                <label>Email</label>

                @if (isExternalLogin)
                {
                    <span class="external">@user.Email</span>

                }
                else
                {
                    <InputText id="Email" @bind-Value="@BasicInfoForm.Email" />
                }
                
            </div>
            @if (isExternalLogin)
            {
              <p class="external-warning">(Email change is not allowed for external login accounts.)</p>
            }
            <button type="submit" class="btn-green save-changes">Save Changes</button>
        </EditForm>
    
        <div class="settings">
            <span class="heading">Settings</span>
            <div class="settings-group">
                <NavLink href="/language" class="language">
                    <i class="fa-solid fa-globe"></i>
                    <p>Language</p>
                    <span>English</span>
                    <i class="fa-solid fa-angle-right"></i>
                </NavLink>
                <div class="notification">
                    <i class="fa-solid fa-bell"></i>
                    <p>Notification</p>
                    <div class="btn-switch">
                        <label>Off</label>
                        <label class="switch" for="notification-switch">
                            <input type="checkbox" id="notification-switch" />
                            <div class="slider round"></div>
                        </label>
                        <label>On</label>
                    </div>
                </div> 
                @* <div class="drak-moode">
                    <i class="fa-solid fa-moon"></i>
                    <p>Drak Mood</p>
                    <div class="btn-switch">
                        <label>Off</label>
                        <label class="switch" for="drak-mode">
                            <input type="checkbox" id="drak-mode" />
                            <div class="slider round"></div>
                        </label>
                        <label>On</label>
                    </div>

                </div>


                </div> *@
                <SwitchMode />
                <div class="help-center">

                    <i class="fa-solid fa-question"></i>
                    <p>Help Center</p>
                    <i class="fa-solid fa-angle-right"></i>
                </div>
            </div>                                                                                
        </div>
        @* <NavLink href="/Account/Pages/LogOut" class="btn-dark logout"><i class="fa-solid fa-right-from-bracket"></i>Log Out</NavLink> *@
    </div>
</section>


@code {

    private ApplicationUser user = default!;
    private string? notificationMessage;
    private string? notificationClass;
    private bool isPageUpdated = false;
    private bool isExternalLogin;

    [SupplyParameterFromForm(FormName = "basicinfo")]
    private AccountBasicInfo BasicInfoForm { get; set; } = new();


    private MultipartFormDataContent FileModel = new MultipartFormDataContent();


    private UserProfileImage UserProfileImage { get; set; }
    public int? Age { get; set; }


    private List<IBrowserFile> loadedFiles = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetUserAsync();
        isExternalLogin = await UserService.IsExternalLoginAsync(user);

        BasicInfoForm.Name = user.Name;
        BasicInfoForm.Email = user.Email!;

        BasicInfoForm.Age = user.Age == 0 ? (int?)null : user.Age;
        BasicInfoForm.Gender = user.Gender;


        UserProfileImage = await FileService.FindProfileImageAsync(user.ProfileImageId);


    }




    private async Task HandleBasicFormSubmit()
    {
        if (user != null)
        {

            user.Name = BasicInfoForm.Name;
            user.Age = BasicInfoForm.Age ?? 0;
            user.Email = BasicInfoForm.Email;
            
            user.Gender = BasicInfoForm.IsMale ? "Male" : "Female";

            var result = await UserService.UpdateUserAsync(user);

            if (result.Succeeded)
            {
                notificationMessage = "User details updated successfully!";
                notificationClass = "alert alert-success";


            }
            else
            {
                notificationMessage = "Failed to update user details.";
                notificationClass = "alert alert-danger";

            }

        }
        else
        {
            //error message?
        }


        //reload page
        StateHasChanged();

        // await Task.Delay(3000);

        // isPageUpdated = true;


    }


    private async Task LoadFiles(InputFileChangeEventArgs eventArgs )
    {

        try
        {

            foreach (var file in eventArgs.GetMultipleFiles())
            {

                var filePath = Path.Combine(@"wwwroot\images\ProfileImages",file.Name);


                using (var fileStream = file.OpenReadStream())
                using (var outputStream = File.Create(filePath))
                {

                    await fileStream.CopyToAsync(outputStream);
                }

                var result = await FileService.CreateFileAsync($"/images/ProfileImages/{file.Name}");

                if(result != null)
                {
                    var user = (await AuthenticationState).User;

                    if (user.Identity!.IsAuthenticated)
                    {
                        var findUser = await UserManager.FindByNameAsync(user.Identity.Name!);


                        if (findUser != null)
                        {

                            findUser.ProfileImageId = result.Id;

                            var imageUpdateResult = await UserManager.UpdateAsync(findUser);

                            if (imageUpdateResult.Succeeded)
                            {
                                StateHasChanged();
                            }
                            else
                            {
                                // Do Something else
                            }
                            
                        }


                    }
                }



            }

        }
        catch (Exception ex) { Debug.WriteLine(ex.Message); }
    }



    private sealed class AccountBasicInfo
    {
        [Display(Name = "", Order = 0)]
        [Required(ErrorMessage = "Name is required")]
        [DataType(DataType.Text)]
        public string Name { get; set; } = null!;

        [Required(ErrorMessage = "Enter a valid email address")]
        [Display(Name = "Email address", Prompt = "Enter your email address", Order = 2)]
        [DataType(DataType.EmailAddress)]
        [RegularExpression("^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$", ErrorMessage = "Invalid e-mail address")]
        public string Email { get; set; } = null!;

        [Display(Order = 3)]
        public int? Age { get; set; }

        public string? Gender { get; set; }

        // Bool för att representera kön som hanterar null-värde
        public bool IsMale
        {
            get => Gender == "Male";
            set => Gender = value ? "Male" : Gender; // Om true, sätt "Male", annars behåll null eller "Female"
        }

        public bool IsFemale
        {
            get => Gender == "Female";
            set => Gender = value ? "Female" : Gender; // Om true, sätt "Female", annars behåll null eller "Male"
        }

    }


    // Hantera checkboxvalet så att endast ett kön kan väljas
    private void OnGenderChanged(bool isMale)
    {
        BasicInfoForm.IsMale = isMale;
        BasicInfoForm.IsFemale = !isMale;
    }



}


