@page "/settings"
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Mvc
@using Microsoft.EntityFrameworkCore
@using RikaWebApp.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization;
@using System.ComponentModel.DataAnnotations
@using RikaWebApp.Client.Pages
@using System.Diagnostics

@rendermode InteractiveServer

@inject HttpClient httpClient
@inject UserService UserService
@inject FileService FileService
@inject IServiceProvider ServiceProvider

@attribute [Authorize]


<section class="settings-page">
    <div class="container">

        <div class="image-upload">
            @if (UserProfileImage == null)
            {
                <img src="./images/profile-image-standard.png" alt="Standard profile image" />
            }
            else
            {
                <img src="@UserProfileImage.ProfileImage" alt="@user.Name" />
            }
            <label for="fileUploader">
                <i class="fa-solid fa-pen"></i>
                <InputFile OnChange="LoadFiles" class="upload" id="fileUploader" type="file" name="file" hidden />
            </label>
        </div>

            <label class="upload">Upload Image</label>
        
        <EditForm FormName="basicinfo" method="post" Model="BasicInfoForm" OnValidSubmit="HandleBasicFormSubmit" novalidate class="form">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="inputgroup">
                <label>Name</label>
                <InputText id="Name" @bind-Value=BasicInfoForm.Name placeholder="@user?.Name" />
            </div>
            <div class="inputgroup">
                <label>Gender</label>
                <button class="btn-dark">Male</button>
                <button class="btn-gray">Female</button>
            </div>
            <div class="inputgroup">
                <Label>Age</Label>
                @if (user?.Age == 0)
                {
                    <input placeholder="Age not specified" />
                }
                else
                {
                    <input placeholder="@user?.Age" />
                }

            </div>
            <div class="inputgroup">
                <label>Email</label>
                <input placeholder="@user?.Email" />
            </div>
            <button type="submit" class="btn-green save-changes">Save Changes</button>
        </EditForm>

        <div class="settings">
            <span class="heading">Settings</span>
            <div class="settings-group">
                <div class="language">
                    <i class="fa-solid fa-globe"></i>
                    <p>Language</p>
                    <span>English</span>
                    <i class="fa-solid fa-angle-right"></i>
                </div>
                <div class="notification">
                    <i class="fa-solid fa-bell"></i>
                    <p>Notification</p>
                    <div class="btn-switch">
                        <label>Off</label>
                        <label class="switch" for="notification-switch">
                            <input type="checkbox" id="notification-switch" />
                            <div class="slider round"></div>
                        </label>
                        <label>On</label>
                    </div>
                </div> 
                @* <div class="drak-moode">
                    <i class="fa-solid fa-moon"></i>
                    <p>Drak Mood</p>
                    <div class="btn-switch">
                        <label>Off</label>
                        <label class="switch" for="drak-mode">
                            <input type="checkbox" id="drak-mode" />
                            <div class="slider round"></div>
                        </label>
                        <label>On</label>
                    </div>
                </div> *@
                <SwitchMode />
                <div class="help-center">
                    <i class="fa-solid fa-question"></i>
                    <p>Help Center</p>
                    <i class="fa-solid fa-angle-right"></i>
                </div>
            </div>                                                                                
        </div>
        @* <NavLink href="/Account/Pages/LogOut" class="btn-dark logout"><i class="fa-solid fa-right-from-bracket"></i>Log Out</NavLink> *@
    </div>
</section>


@code {

    private ApplicationUser user = default!;
    private string? notificationMessage;
    private string? notificationClass;


    [SupplyParameterFromForm(FormName = "basicinfo")]
    private AccountBasicInfo BasicInfoForm { get; set; } = new();


    private MultipartFormDataContent FileModel = new MultipartFormDataContent();

    private UserProfileImage UserProfileImage { get; set; }
    public int? Age { get; set; }

    private List<IBrowserFile> loadedFiles = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetUserAsync();

        BasicInfoForm.Name = user.Name;
        BasicInfoForm.Email = user.Email!;

        UserProfileImage = await FileService.FindProfileImageAsync(user.ProfileImageId);


    }


    private async Task HandleBasicFormSubmit()
    {
        if (user != null)
        {
            user.Name = BasicInfoForm.Name;

            var result = await UserService.UpdateUserAsync(user);

            if (result.Succeeded)
            {
                notificationMessage = "User details updated successfully!";
                notificationClass = "alert-success";


            }

        }
        else
        {
            //error message?
        }
        //reload page
        StateHasChanged();
    }

    private async Task LoadFiles(InputFileChangeEventArgs eventArgs )
    {

        try
        {

            foreach (var file in eventArgs.GetMultipleFiles())
            {
                // Specificera sökvägen där du vill spara filen
                var filePath = Path.Combine(@"wwwroot\images\ProfileImages",file.Name);

                // Öppna en stream från filen
                using (var fileStream = file.OpenReadStream())
                using (var outputStream = File.Create(filePath))
                {
                    // Kopiera innehållet från filens stream till den specifika sökvägen
                    await fileStream.CopyToAsync(outputStream);
                }

                var result = await FileService.CreateFileAsync($"/images/ProfileImages/{file.Name}");

                if(result != null)
                {
                    var user = (await AuthenticationState).User;

                    if (user.Identity!.IsAuthenticated)
                    {
                        var findUser = await UserManager.FindByNameAsync(user.Identity.Name!);


                        if (findUser != null)
                        {

                            findUser.ProfileImageId = result.Id;

                            var imageUpdateResult = await UserManager.UpdateAsync(findUser);

                            if (imageUpdateResult.Succeeded)
                            {
                                StateHasChanged();
                            }
                            else
                            {
                                // Do Something else
                            }
                            
                        }


                    }
                }



            }

        }
        catch (Exception ex) { Debug.WriteLine(ex.Message); }
    }


    private sealed class AccountBasicInfo
    {
        [Display(Name = "", Prompt = "Enter your first name", Order = 0)]
        [Required(ErrorMessage = "First name is required")]
        [DataType(DataType.Text)]
        public string Name { get; set; } = null!;


        public string Email { get; set; } = null!;

    }


}


