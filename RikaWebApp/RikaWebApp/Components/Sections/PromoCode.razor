@using System.ComponentModel.DataAnnotations


<section class="promocode-section">
    <div class="content">
        <EditForm Model="promoCodeModel" OnInvalidSubmit="HandlePromoCodeSubmit" FormName="promocodeform">
           <DataAnnotationsValidator/>
           <ValidationSummary />
             <div class="input-group">
                <InputText @bind-Value="promoCodeModel.PromoCode" placeholder="Promo Code"/>
                <ValidationMessage For="@(() => promoCodeModel.PromoCode)"/>
             </div>
             <button class="btn-dark" type="submit">Apply</button>
            @if (!string.IsNullOrEmpty(StatusMessage))
               {
                  <p>@StatusMessage</p>
               }
        </EditForm>   
      </div>
</section>

@code {

    [SupplyParameterFromForm]
    private PromoCodeModel promoCodeModel { get; set; } = new();

    private string? StatusMessage { get; set; }

    public async Task HandlePromoCodeSubmit()
    {
        try
        {
            // // skicka rabattkod för validering till shoppingcartservicen
            // bool isValid = await _shoppingCartService.ValidatePromoCodeAsync(promoCodeModel.PromoCode);

            // StatusMessage = isValid ? "" : "Invalid promo code or not available"; 
            // // är den giltig behöver vi inte skriva ut något, totalsumman uppdateras och visas för användaren

        }
        catch (Exception ex)
        {
            StatusMessage = $"An error occured: {ex.Message}";
        }
    }

    private sealed class PromoCodeModel
    {
        [Required(ErrorMessage = "Field is empty, please enter a promo code")]
        [StringLength(10, ErrorMessage = "Enter a valid promo code without special characters")] // inte fler tecken än 10 i rabattkoden, inga specialtecken eller mellanslag
        public string? PromoCode { get; set; }
    }
}
